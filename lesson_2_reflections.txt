What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository a new directory is created, .git. This directory will store all the commits of the
files which will be tracked using git system. It is necesary to initialize a repository, because otherwise the git
system won't track any changes in the directory containing any files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an intermediate area where the files added to this area can be commited to the repository once the
changes are complete. The value of this approach is that the commits will be more logical and will contain only files
which contains changes to the code.

How can you use the staging area to make sure you have one commit per logical change?
To make sure you have one commit per logical change you can add to the staging area only the files that were modified
for that logical change and then commit the files to the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful when you want to add a new feature which will need some testing, and in the same time you
want to keep your application working. Branches can be used to develop and test the new feature, in one branch named
"New feature", and keep the normal version of your app in the master branch.

How do the diagrams help you visualize the branch structure?
The history of the branch structure can be visualized using the diagrams. If you make a commit for some experimental
changes it is called "detached HEAD" and it will not impact any existing branch. Using the diagrams you can checkout
and create a new branch for the experimental changes in the same time, using "git checkout -b new_branch" command.
Otherwise, if you checkout to another branch, you will discard the commit made earlier.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches is one branch with all the commits from the previous ordered by time and date. The
diagram is showing the two branches with every commit to represent the merging of the branches in the last commit.
 