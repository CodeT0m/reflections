How did viewing a diff between two versions of a file help you see the bug that was introduced?
The diff command selected the exact lines that where modified in the new version vs the old version of the "game.js"
file. This way it was easy to see the typo which caused the malfunction of the game.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
In the long term being able to use older versions of a file can bring productivity into your work. You can use parts of
code that are allready written and save time.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having
versions automatically saved , like Google Docs does?
The pros of manually choosing when to create a commit are: much better control over the number of versions of a file,
the feature which allows to name the commit for a easier way of tracking the changes. The cons are the lack of tracking
in time the different versions of the file and the danger of not saving a change of the file.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like
Google Docs, treat each file separately?
Git and other version control systems allow saving multiple files in one commit because, in some projects, like
websites, it is absolutely necessary to save more than one file once, html or css files which work together. Google
Docs is not designed for programming, instead can be used for any kind of documents, unrelated files.

How can you use the commands git log and git diff to view the history of files?
Git log command shows a list of all the commits for a certain repository or file. The list contains the commit ID and
the commit message. Using the git diff command you can view the modified lines of code, deleted or added. Those lines
have a "+" or "-" sign in front to match the addition or deletion. Git diff command uses the ID's of two commits to
show the difference between them: git diff firstID secondID.

How might using version control make you more confident to make changes that could break something?
Any change in the code that could damage the program can be easy reverted using git checkout command. By adding the
commit ID of a previous commit (git checkout IDprevoius) you can check if the code is running without any bug. When you
find the commit with the bug you can use git diff to spot the error in the code, and fix it.

Now that you have your workspace set up, what do you want to try using Git for?
I will use Git to work on a project for a website and different modules using JS and PHP that will be loaded into the
webpages.
